{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\Documentos\\\\FiapTrabalhos\\\\GitHub\\\\green-front-react\\\\pages\\\\_app.js\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport 'fontsource-roboto';\nimport PropTypes from 'prop-types';\nimport Head from 'next/head';\nimport Tema from '../src/assets/styles/tema';\nimport { ThemeProvider } from '@material-ui/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nfunction MyApp({\n  Component,\n  pageProps\n}) {\n  _s();\n\n  React.useEffect(() => {\n    // Remove the server-side injected CSS.\n    const jssStyles = document.querySelector('#jss-server-side');\n\n    if (jssStyles) {\n      jssStyles.parentElement.removeChild(jssStyles);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"My page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"viewport\",\n        content: \"minimum-scale=1, initial-scale=1, width=device-width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: Tema,\n      children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MyApp, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = MyApp;\nMyApp.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  pageProps: PropTypes.object.isRequired\n}; // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["D:/Documentos/FiapTrabalhos/GitHub/green-front-react/pages/_app.js"],"names":["PropTypes","Head","Tema","ThemeProvider","CssBaseline","MyApp","Component","pageProps","React","useEffect","jssStyles","document","querySelector","parentElement","removeChild","propTypes","elementType","isRequired","object"],"mappings":";;;;;;;;;;AAAA,OAAO,mBAAP;AACA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,2BAAjB;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAf,EAAyC;AAAA;;AAErCC,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AAClB;AACA,UAAMC,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,kBAAvB,CAAlB;;AACA,QAAIF,SAAJ,EAAe;AACbA,MAAAA,SAAS,CAACG,aAAV,CAAwBC,WAAxB,CAAoCJ,SAApC;AACD;AACF,GANH,EAMK,EANL;AAQA,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,4BACA,QAAC,IAAD;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,UAAX;AAAsB,QAAA,OAAO,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAKA,QAAC,aAAD;AAAe,MAAA,KAAK,EAAER,IAAtB;AAAA,8BACA,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cADA,eAGI,QAAC,SAAD,oBAAeK,SAAf;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcD;;GAxBMF,K;;KAAAA,K;AA0BPA,KAAK,CAACU,SAAN,GAAkB;AAChBT,EAAAA,SAAS,EAAEN,SAAS,CAACgB,WAAV,CAAsBC,UADjB;AAEhBV,EAAAA,SAAS,EAAEP,SAAS,CAACkB,MAAV,CAAiBD;AAFZ,CAAlB,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeZ,KAAf","sourcesContent":["import 'fontsource-roboto';\r\nimport PropTypes from 'prop-types';\r\nimport Head from 'next/head';\r\nimport Tema from '../src/assets/styles/tema';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nfunction MyApp({ Component, pageProps }) {\r\n\r\n    React.useEffect(() => {\r\n        // Remove the server-side injected CSS.\r\n        const jssStyles = document.querySelector('#jss-server-side');\r\n        if (jssStyles) {\r\n          jssStyles.parentElement.removeChild(jssStyles);\r\n        }\r\n      }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n        <Head>\r\n          <title>My page</title>\r\n          <meta name=\"viewport\" content=\"minimum-scale=1, initial-scale=1, width=device-width\" />\r\n        </Head>\r\n        <ThemeProvider theme={Tema} >\r\n        <CssBaseline />\r\n\r\n            <Component {...pageProps} />\r\n        </ThemeProvider>\r\n        </React.Fragment>\r\n\r\n)\r\n  }\r\n\r\n  MyApp.propTypes = {\r\n    Component: PropTypes.elementType.isRequired,\r\n    pageProps: PropTypes.object.isRequired,\r\n  };\r\n  \r\n  // Only uncomment this method if you have blocking data requirements for\r\n  // every single page in your application. This disables the ability to\r\n  // perform automatic static optimization, causing every page in your app to\r\n  // be server-side rendered.\r\n  //\r\n  // MyApp.getInitialProps = async (appContext) => {\r\n  //   // calls page's `getInitialProps` and fills `appProps.pageProps`\r\n  //   const appProps = await App.getInitialProps(appContext);\r\n  //\r\n  //   return { ...appProps }\r\n  // }\r\n  \r\n  export default MyApp"]},"metadata":{},"sourceType":"module"}